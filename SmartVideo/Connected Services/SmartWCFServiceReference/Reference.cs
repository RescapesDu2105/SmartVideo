//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartVideo.SmartWCFServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SmartWCFServiceReference.ISmartWCFService")]
    public interface ISmartWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetData", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetData", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmsDBFilm", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsDBFilmResponse")]
        DTOLib.FilmDTO[] GetFilmsDBFilm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmsDBFilm", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsDBFilmResponse")]
        System.Threading.Tasks.Task<DTOLib.FilmDTO[]> GetFilmsDBFilmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmInfos", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmInfosResponse")]
        DTOLib.FilmDTO GetFilmInfos(DTOLib.FilmDTO Film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmInfos", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmInfosResponse")]
        System.Threading.Tasks.Task<DTOLib.FilmDTO> GetFilmInfosAsync(DTOLib.FilmDTO Film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmsPage", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsPageResponse")]
        DTOLib.FilmDTO[] GetFilmsPage(int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmsPage", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsPageResponse")]
        System.Threading.Tasks.Task<DTOLib.FilmDTO[]> GetFilmsPageAsync(int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetActors", ReplyAction="http://tempuri.org/ISmartWCFService/GetActorsResponse")]
        DTOLib.ActorDTO[] GetActors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetActors", ReplyAction="http://tempuri.org/ISmartWCFService/GetActorsResponse")]
        System.Threading.Tasks.Task<DTOLib.ActorDTO[]> GetActorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetGenres", ReplyAction="http://tempuri.org/ISmartWCFService/GetGenresResponse")]
        DTOLib.GenreDTO[] GetGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetGenres", ReplyAction="http://tempuri.org/ISmartWCFService/GetGenresResponse")]
        System.Threading.Tasks.Task<DTOLib.GenreDTO[]> GetGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetDirectors", ReplyAction="http://tempuri.org/ISmartWCFService/GetDirectorsResponse")]
        DTOLib.DirectorDTO[] GetDirectors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetDirectors", ReplyAction="http://tempuri.org/ISmartWCFService/GetDirectorsResponse")]
        System.Threading.Tasks.Task<DTOLib.DirectorDTO[]> GetDirectorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/UpdateTrailerFilm", ReplyAction="http://tempuri.org/ISmartWCFService/UpdateTrailerFilmResponse")]
        void UpdateTrailerFilm(int idFilm, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/UpdateTrailerFilm", ReplyAction="http://tempuri.org/ISmartWCFService/UpdateTrailerFilmResponse")]
        System.Threading.Tasks.Task UpdateTrailerFilmAsync(int idFilm, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/CountFilms", ReplyAction="http://tempuri.org/ISmartWCFService/CountFilmsResponse")]
        int CountFilms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/CountFilms", ReplyAction="http://tempuri.org/ISmartWCFService/CountFilmsResponse")]
        System.Threading.Tasks.Task<int> CountFilmsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmartWCFServiceChannel : SmartVideo.SmartWCFServiceReference.ISmartWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmartWCFServiceClient : System.ServiceModel.ClientBase<SmartVideo.SmartWCFServiceReference.ISmartWCFService>, SmartVideo.SmartWCFServiceReference.ISmartWCFService {
        
        public SmartWCFServiceClient() {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public DTOLib.FilmDTO[] GetFilmsDBFilm() {
            return base.Channel.GetFilmsDBFilm();
        }
        
        public System.Threading.Tasks.Task<DTOLib.FilmDTO[]> GetFilmsDBFilmAsync() {
            return base.Channel.GetFilmsDBFilmAsync();
        }
        
        public DTOLib.FilmDTO GetFilmInfos(DTOLib.FilmDTO Film) {
            return base.Channel.GetFilmInfos(Film);
        }
        
        public System.Threading.Tasks.Task<DTOLib.FilmDTO> GetFilmInfosAsync(DTOLib.FilmDTO Film) {
            return base.Channel.GetFilmInfosAsync(Film);
        }
        
        public DTOLib.FilmDTO[] GetFilmsPage(int page) {
            return base.Channel.GetFilmsPage(page);
        }
        
        public System.Threading.Tasks.Task<DTOLib.FilmDTO[]> GetFilmsPageAsync(int page) {
            return base.Channel.GetFilmsPageAsync(page);
        }
        
        public DTOLib.ActorDTO[] GetActors() {
            return base.Channel.GetActors();
        }
        
        public System.Threading.Tasks.Task<DTOLib.ActorDTO[]> GetActorsAsync() {
            return base.Channel.GetActorsAsync();
        }
        
        public DTOLib.GenreDTO[] GetGenres() {
            return base.Channel.GetGenres();
        }
        
        public System.Threading.Tasks.Task<DTOLib.GenreDTO[]> GetGenresAsync() {
            return base.Channel.GetGenresAsync();
        }
        
        public DTOLib.DirectorDTO[] GetDirectors() {
            return base.Channel.GetDirectors();
        }
        
        public System.Threading.Tasks.Task<DTOLib.DirectorDTO[]> GetDirectorsAsync() {
            return base.Channel.GetDirectorsAsync();
        }
        
        public void UpdateTrailerFilm(int idFilm, string url) {
            base.Channel.UpdateTrailerFilm(idFilm, url);
        }
        
        public System.Threading.Tasks.Task UpdateTrailerFilmAsync(int idFilm, string url) {
            return base.Channel.UpdateTrailerFilmAsync(idFilm, url);
        }
        
        public int CountFilms() {
            return base.Channel.CountFilms();
        }
        
        public System.Threading.Tasks.Task<int> CountFilmsAsync() {
            return base.Channel.CountFilmsAsync();
        }
    }
}
