//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilmDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOLib")]
    [System.SerializableAttribute()]
    public partial class FilmDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConsoleApp.ServiceReference.ActorDTO[] ActorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConsoleApp.ServiceReference.DirectorDTO[] DirectorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConsoleApp.ServiceReference.GenreDTO[] GenresField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Original_TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PosterPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RuntimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrailerPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConsoleApp.ServiceReference.ActorDTO[] Actors {
            get {
                return this.ActorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActorsField, value) != true)) {
                    this.ActorsField = value;
                    this.RaisePropertyChanged("Actors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConsoleApp.ServiceReference.DirectorDTO[] Directors {
            get {
                return this.DirectorsField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectorsField, value) != true)) {
                    this.DirectorsField = value;
                    this.RaisePropertyChanged("Directors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConsoleApp.ServiceReference.GenreDTO[] Genres {
            get {
                return this.GenresField;
            }
            set {
                if ((object.ReferenceEquals(this.GenresField, value) != true)) {
                    this.GenresField = value;
                    this.RaisePropertyChanged("Genres");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Original_Title {
            get {
                return this.Original_TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.Original_TitleField, value) != true)) {
                    this.Original_TitleField = value;
                    this.RaisePropertyChanged("Original_Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PosterPath {
            get {
                return this.PosterPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PosterPathField, value) != true)) {
                    this.PosterPathField = value;
                    this.RaisePropertyChanged("PosterPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Runtime {
            get {
                return this.RuntimeField;
            }
            set {
                if ((this.RuntimeField.Equals(value) != true)) {
                    this.RuntimeField = value;
                    this.RaisePropertyChanged("Runtime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrailerPath {
            get {
                return this.TrailerPathField;
            }
            set {
                if ((object.ReferenceEquals(this.TrailerPathField, value) != true)) {
                    this.TrailerPathField = value;
                    this.RaisePropertyChanged("TrailerPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActorDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOLib")]
    [System.SerializableAttribute()]
    public partial class ActorDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CharacterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Character {
            get {
                return this.CharacterField;
            }
            set {
                if ((object.ReferenceEquals(this.CharacterField, value) != true)) {
                    this.CharacterField = value;
                    this.RaisePropertyChanged("Character");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectorDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOLib")]
    [System.SerializableAttribute()]
    public partial class DirectorDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenreDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOLib")]
    [System.SerializableAttribute()]
    public partial class GenreDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOLib")]
    [System.SerializableAttribute()]
    public partial class ClientDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrenomField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mail {
            get {
                return this.MailField;
            }
            set {
                if ((object.ReferenceEquals(this.MailField, value) != true)) {
                    this.MailField = value;
                    this.RaisePropertyChanged("Mail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nom {
            get {
                return this.NomField;
            }
            set {
                if ((object.ReferenceEquals(this.NomField, value) != true)) {
                    this.NomField = value;
                    this.RaisePropertyChanged("Nom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Prenom {
            get {
                return this.PrenomField;
            }
            set {
                if ((object.ReferenceEquals(this.PrenomField, value) != true)) {
                    this.PrenomField = value;
                    this.RaisePropertyChanged("Prenom");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HitsDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOLib")]
    [System.SerializableAttribute()]
    public partial class HitsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CritereField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdClientField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Critere {
            get {
                return this.CritereField;
            }
            set {
                if ((object.ReferenceEquals(this.CritereField, value) != true)) {
                    this.CritereField = value;
                    this.RaisePropertyChanged("Critere");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdClient {
            get {
                return this.IdClientField;
            }
            set {
                if ((object.ReferenceEquals(this.IdClientField, value) != true)) {
                    this.IdClientField = value;
                    this.RaisePropertyChanged("IdClient");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationDTO", Namespace="http://schemas.datacontract.org/2004/07/DTOLib")]
    [System.SerializableAttribute()]
    public partial class LocationDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateFinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdFilmField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateFin {
            get {
                return this.DateFinField;
            }
            set {
                if ((this.DateFinField.Equals(value) != true)) {
                    this.DateFinField = value;
                    this.RaisePropertyChanged("DateFin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdClient {
            get {
                return this.IdClientField;
            }
            set {
                if ((object.ReferenceEquals(this.IdClientField, value) != true)) {
                    this.IdClientField = value;
                    this.RaisePropertyChanged("IdClient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdFilm {
            get {
                return this.IdFilmField;
            }
            set {
                if ((this.IdFilmField.Equals(value) != true)) {
                    this.IdFilmField = value;
                    this.RaisePropertyChanged("IdFilm");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISmartWCFService")]
    public interface ISmartWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetData", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetData", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmById", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmByIdResponse")]
        ConsoleApp.ServiceReference.FilmDTO GetFilmById(int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmById", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmByIdResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO> GetFilmByIdAsync(int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilms", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsResponse")]
        ConsoleApp.ServiceReference.FilmDTO[] GetFilms(string table, string critere, int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilms", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO[]> GetFilmsAsync(string table, string critere, int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetNumberOfFilms", ReplyAction="http://tempuri.org/ISmartWCFService/GetNumberOfFilmsResponse")]
        ConsoleApp.ServiceReference.FilmDTO[] GetNumberOfFilms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetNumberOfFilms", ReplyAction="http://tempuri.org/ISmartWCFService/GetNumberOfFilmsResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO[]> GetNumberOfFilmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmInfos", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmInfosResponse")]
        ConsoleApp.ServiceReference.FilmDTO GetFilmInfos(ConsoleApp.ServiceReference.FilmDTO Film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmInfos", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmInfosResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO> GetFilmInfosAsync(ConsoleApp.ServiceReference.FilmDTO Film);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmsPage", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsPageResponse")]
        ConsoleApp.ServiceReference.FilmDTO[] GetFilmsPage(int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetFilmsPage", ReplyAction="http://tempuri.org/ISmartWCFService/GetFilmsPageResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO[]> GetFilmsPageAsync(int page);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetActors", ReplyAction="http://tempuri.org/ISmartWCFService/GetActorsResponse")]
        ConsoleApp.ServiceReference.ActorDTO[] GetActors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetActors", ReplyAction="http://tempuri.org/ISmartWCFService/GetActorsResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.ActorDTO[]> GetActorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetGenres", ReplyAction="http://tempuri.org/ISmartWCFService/GetGenresResponse")]
        ConsoleApp.ServiceReference.GenreDTO[] GetGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetGenres", ReplyAction="http://tempuri.org/ISmartWCFService/GetGenresResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.GenreDTO[]> GetGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetDirectors", ReplyAction="http://tempuri.org/ISmartWCFService/GetDirectorsResponse")]
        ConsoleApp.ServiceReference.DirectorDTO[] GetDirectors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetDirectors", ReplyAction="http://tempuri.org/ISmartWCFService/GetDirectorsResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.DirectorDTO[]> GetDirectorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/UpdateTrailerFilm", ReplyAction="http://tempuri.org/ISmartWCFService/UpdateTrailerFilmResponse")]
        void UpdateTrailerFilm(int idFilm, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/UpdateTrailerFilm", ReplyAction="http://tempuri.org/ISmartWCFService/UpdateTrailerFilmResponse")]
        System.Threading.Tasks.Task UpdateTrailerFilmAsync(int idFilm, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/CountFilms", ReplyAction="http://tempuri.org/ISmartWCFService/CountFilmsResponse")]
        int CountFilms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/CountFilms", ReplyAction="http://tempuri.org/ISmartWCFService/CountFilmsResponse")]
        System.Threading.Tasks.Task<int> CountFilmsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/CountFilmsRecherche", ReplyAction="http://tempuri.org/ISmartWCFService/CountFilmsRechercheResponse")]
        int CountFilmsRecherche(string table, string critere);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/CountFilmsRecherche", ReplyAction="http://tempuri.org/ISmartWCFService/CountFilmsRechercheResponse")]
        System.Threading.Tasks.Task<int> CountFilmsRechercheAsync(string table, string critere);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetClientById", ReplyAction="http://tempuri.org/ISmartWCFService/GetClientByIdResponse")]
        ConsoleApp.ServiceReference.ClientDTO GetClientById(string idClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetClientById", ReplyAction="http://tempuri.org/ISmartWCFService/GetClientByIdResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.ClientDTO> GetClientByIdAsync(string idClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetHitsById", ReplyAction="http://tempuri.org/ISmartWCFService/GetHitsByIdResponse")]
        ConsoleApp.ServiceReference.HitsDTO GetHitsById(int idHits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetHitsById", ReplyAction="http://tempuri.org/ISmartWCFService/GetHitsByIdResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.HitsDTO> GetHitsByIdAsync(int idHits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetLocationById", ReplyAction="http://tempuri.org/ISmartWCFService/GetLocationByIdResponse")]
        ConsoleApp.ServiceReference.LocationDTO GetLocationById(int idLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetLocationById", ReplyAction="http://tempuri.org/ISmartWCFService/GetLocationByIdResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.LocationDTO> GetLocationByIdAsync(int idLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetLocationsClient", ReplyAction="http://tempuri.org/ISmartWCFService/GetLocationsClientResponse")]
        ConsoleApp.ServiceReference.LocationDTO[] GetLocationsClient(string idClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetLocationsClient", ReplyAction="http://tempuri.org/ISmartWCFService/GetLocationsClientResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.LocationDTO[]> GetLocationsClientAsync(string idClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/AddLocationClient", ReplyAction="http://tempuri.org/ISmartWCFService/AddLocationClientResponse")]
        void AddLocationClient(string idClient, int idFilm, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/AddLocationClient", ReplyAction="http://tempuri.org/ISmartWCFService/AddLocationClientResponse")]
        System.Threading.Tasks.Task AddLocationClientAsync(string idClient, int idFilm, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetClients", ReplyAction="http://tempuri.org/ISmartWCFService/GetClientsResponse")]
        ConsoleApp.ServiceReference.ClientDTO[] GetClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetClients", ReplyAction="http://tempuri.org/ISmartWCFService/GetClientsResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.ClientDTO[]> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetHits", ReplyAction="http://tempuri.org/ISmartWCFService/GetHitsResponse")]
        ConsoleApp.ServiceReference.HitsDTO[] GetHits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetHits", ReplyAction="http://tempuri.org/ISmartWCFService/GetHitsResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.HitsDTO[]> GetHitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetLocations", ReplyAction="http://tempuri.org/ISmartWCFService/GetLocationsResponse")]
        ConsoleApp.ServiceReference.LocationDTO[] GetLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetLocations", ReplyAction="http://tempuri.org/ISmartWCFService/GetLocationsResponse")]
        System.Threading.Tasks.Task<ConsoleApp.ServiceReference.LocationDTO[]> GetLocationsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmartWCFServiceChannel : ConsoleApp.ServiceReference.ISmartWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmartWCFServiceClient : System.ServiceModel.ClientBase<ConsoleApp.ServiceReference.ISmartWCFService>, ConsoleApp.ServiceReference.ISmartWCFService {
        
        public SmartWCFServiceClient() {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ConsoleApp.ServiceReference.FilmDTO GetFilmById(int idFilm) {
            return base.Channel.GetFilmById(idFilm);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO> GetFilmByIdAsync(int idFilm) {
            return base.Channel.GetFilmByIdAsync(idFilm);
        }
        
        public ConsoleApp.ServiceReference.FilmDTO[] GetFilms(string table, string critere, int page) {
            return base.Channel.GetFilms(table, critere, page);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO[]> GetFilmsAsync(string table, string critere, int page) {
            return base.Channel.GetFilmsAsync(table, critere, page);
        }
        
        public ConsoleApp.ServiceReference.FilmDTO[] GetNumberOfFilms() {
            return base.Channel.GetNumberOfFilms();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO[]> GetNumberOfFilmsAsync() {
            return base.Channel.GetNumberOfFilmsAsync();
        }
        
        public ConsoleApp.ServiceReference.FilmDTO GetFilmInfos(ConsoleApp.ServiceReference.FilmDTO Film) {
            return base.Channel.GetFilmInfos(Film);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO> GetFilmInfosAsync(ConsoleApp.ServiceReference.FilmDTO Film) {
            return base.Channel.GetFilmInfosAsync(Film);
        }
        
        public ConsoleApp.ServiceReference.FilmDTO[] GetFilmsPage(int page) {
            return base.Channel.GetFilmsPage(page);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.FilmDTO[]> GetFilmsPageAsync(int page) {
            return base.Channel.GetFilmsPageAsync(page);
        }
        
        public ConsoleApp.ServiceReference.ActorDTO[] GetActors() {
            return base.Channel.GetActors();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.ActorDTO[]> GetActorsAsync() {
            return base.Channel.GetActorsAsync();
        }
        
        public ConsoleApp.ServiceReference.GenreDTO[] GetGenres() {
            return base.Channel.GetGenres();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.GenreDTO[]> GetGenresAsync() {
            return base.Channel.GetGenresAsync();
        }
        
        public ConsoleApp.ServiceReference.DirectorDTO[] GetDirectors() {
            return base.Channel.GetDirectors();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.DirectorDTO[]> GetDirectorsAsync() {
            return base.Channel.GetDirectorsAsync();
        }
        
        public void UpdateTrailerFilm(int idFilm, string url) {
            base.Channel.UpdateTrailerFilm(idFilm, url);
        }
        
        public System.Threading.Tasks.Task UpdateTrailerFilmAsync(int idFilm, string url) {
            return base.Channel.UpdateTrailerFilmAsync(idFilm, url);
        }
        
        public int CountFilms() {
            return base.Channel.CountFilms();
        }
        
        public System.Threading.Tasks.Task<int> CountFilmsAsync() {
            return base.Channel.CountFilmsAsync();
        }
        
        public int CountFilmsRecherche(string table, string critere) {
            return base.Channel.CountFilmsRecherche(table, critere);
        }
        
        public System.Threading.Tasks.Task<int> CountFilmsRechercheAsync(string table, string critere) {
            return base.Channel.CountFilmsRechercheAsync(table, critere);
        }
        
        public ConsoleApp.ServiceReference.ClientDTO GetClientById(string idClient) {
            return base.Channel.GetClientById(idClient);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.ClientDTO> GetClientByIdAsync(string idClient) {
            return base.Channel.GetClientByIdAsync(idClient);
        }
        
        public ConsoleApp.ServiceReference.HitsDTO GetHitsById(int idHits) {
            return base.Channel.GetHitsById(idHits);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.HitsDTO> GetHitsByIdAsync(int idHits) {
            return base.Channel.GetHitsByIdAsync(idHits);
        }
        
        public ConsoleApp.ServiceReference.LocationDTO GetLocationById(int idLocation) {
            return base.Channel.GetLocationById(idLocation);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.LocationDTO> GetLocationByIdAsync(int idLocation) {
            return base.Channel.GetLocationByIdAsync(idLocation);
        }
        
        public ConsoleApp.ServiceReference.LocationDTO[] GetLocationsClient(string idClient) {
            return base.Channel.GetLocationsClient(idClient);
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.LocationDTO[]> GetLocationsClientAsync(string idClient) {
            return base.Channel.GetLocationsClientAsync(idClient);
        }
        
        public void AddLocationClient(string idClient, int idFilm, System.DateTime date) {
            base.Channel.AddLocationClient(idClient, idFilm, date);
        }
        
        public System.Threading.Tasks.Task AddLocationClientAsync(string idClient, int idFilm, System.DateTime date) {
            return base.Channel.AddLocationClientAsync(idClient, idFilm, date);
        }
        
        public ConsoleApp.ServiceReference.ClientDTO[] GetClients() {
            return base.Channel.GetClients();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.ClientDTO[]> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public ConsoleApp.ServiceReference.HitsDTO[] GetHits() {
            return base.Channel.GetHits();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.HitsDTO[]> GetHitsAsync() {
            return base.Channel.GetHitsAsync();
        }
        
        public ConsoleApp.ServiceReference.LocationDTO[] GetLocations() {
            return base.Channel.GetLocations();
        }
        
        public System.Threading.Tasks.Task<ConsoleApp.ServiceReference.LocationDTO[]> GetLocationsAsync() {
            return base.Channel.GetLocationsAsync();
        }
    }
}
